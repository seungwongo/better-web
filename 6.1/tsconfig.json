{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* 프로젝트 관련 옵션 */
    // "incremental": true,                              /* 프로젝트를 증분 컴파일할 수 있도록 .tsbuildinfo 파일을 저장합니다. */
    // "composite": true,                                /* 타입스크립트 프로젝트를 프로젝트 참조와 함께 사용할 수 있도록 하는 제약 조건 활성화. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* .tsbuildinfo 증분 컴파일 파일의 경로를 지정합니다. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 복합 프로젝트를 참조할 때 선언 파일 대신 소스 파일 선호 비활성화. */
    // "disableSolutionSearching": true,                 /* 편집할 때 다중 프로젝트 참조 확인에서 프로젝트를 선택 해제합니다. */
    // "disableReferencedProjectLoad": true,             /* 타입스크립트에 의해 자동으로 로드되는 프로젝트 수를 줄입니다. */

    /* 언어와 환경 관련 옵션 */
    "target": "es2016" /* 내보낼 JavaScript에 대한 버전을 설정하고 호환되는 라이브러리 선언을 포함합니다. */,
    // "lib": [],                                        /* 대상 런타임 환경을 설명하는 번들 라이브러리 선언 파일 세트 지정합니다. */
    // "jsx": "preserve",                                /* 생성되는 JSX 코드를 지정합니다. */
    // "experimentalDecorators": true,                   /* TC39 2단계 초안 데코레이터에 대한 실험적 지원을 활성화합니다. */
    // "emitDecoratorMetadata": true,                    /* 소스 파일의 데코레이트된 선언에 대한 디자인 타입 메타데이터 내보내기를 활성화합니다. */
    // "jsxFactory": "",                                 /* React JSX 내보내기를 대상으로 할 때 사용되는 JSX 팩토리 함수를 지정합니다. */
    // "jsxFragmentFactory": "",                         /* React JSX 내보내기를 대상으로 할 때 프래그먼트에 사용되는 JSX 프래그먼트 참조를 지정합니다. */
    // "jsxImportSource": "",                            /* 'jsx: react-jsx*'를 사용할 때 JSX 팩터리 함수를 가져오는 데 사용되는 모듈 지정자를 지정합니다. */
    // "reactNamespace": "",                             /* 'createElement'에 대해 호출된 개체를 지정합니다. 이것은 'react' JSX 방출을 대상으로 할 때만 적용됩니다. */
    // "noLib": true,                                    /* 기본 lib.d.ts를 포함하여 라이브러리 파일 포함을 비활성화합니다. */
    // "useDefineForClassFields": true,                  /* ECMAScript 표준 준수 클래스 필드를 내보냅니다. */
    // "moduleDetection": "auto",                        /* 모듈 형식 JS 파일을 감지하는 데 사용되는 방법을 제어합니다. */

    /* 모듈 관련 옵션 */
    "module": "commonjs" /* 생성되는 모듈 코드를 지정합니다. */,
    // "rootDir": "./",                                  /* 소스 파일 내에서 루트 폴더를 지정합니다. */
    // "moduleResolution": "node",                       /* 타입스크립트가 주어진 모듈 지정자에서 파일을 찾는 방법을 지정합니다. */
    // "baseUrl": "./",                                  /* 상대적이지 않은 모듈 이름을 확인하기 위한 기본 디렉터리를 지정합니다. */
    // "paths": {},                                      /* 추가적인 검색 위치로 가져오기를 다시 매핑하는 항목 집합을 지정합니다. */
    // "rootDirs": [],                                   /* 모듈을 해석할 때 여러 폴더를 하나로 취급하도록 허용합니다. */
    // "typeRoots": [],                                  /* './node_modules/@types'처럼 작동하는 여러 폴더를 지정합니다. */
    // "types": [],                                      /* 소스 파일에서 참조하지 않고 포함할 타입 패키지 이름을 지정합니다. */
    // "allowUmdGlobalAccess": true,                     /* 모듈에서 UMD 전역 액세스를 허용합니다. */
    // "moduleSuffixes": [],                             /* 모듈을 해석할 때 검색할 파일 이름 접미사 목록입니다. */
    // "resolveJsonModule": true,                        /* .json 파일 가져오기를 활성화합니다. */
    // "noResolve": true,                                /* 타입스크립트가 프로젝트에 추가해야 하는 파일 수를 확장하는 'import', 'require' 또는 '<reference>'를 허용하지 않습니다. */

    /* 자바스크립트 지원 옵션 */
    // "allowJs": true,                                  /* 자바스크립트 파일이 타입스크립트 프로그램의 일부가 되도록 허용합니다. 자바스크립트 파일에서 오류를 가져오려면 'checkJS' 옵션을 활성화합니다. */
    // "checkJs": true,                                  /* 타입 검사기가 자바스크립트 파일에서 오류 보고를 활성화합니다. */
    // "maxNodeModuleJsDepth": 1,                        /* 'node_modules'에서 자바스크립트 파일을 확인하는 데 사용되는 최대 폴더 깊이를 지정합니다. 'allowJs'에만 적용 가능합니다. */

    /* 내보내기 관련 옵션 */
    // "declaration": true,                              /* 프로젝트의 타입스크립트 및 자바스크립트 파일에서 .d.ts 파일을 생성합니다. */
    // "declarationMap": true,                           /* d.ts 파일에 대한 소스 맵을 만듭니다. */
    // "emitDeclarationOnly": true,                      /* 자바스크립트 파일이 아닌 d.ts 파일만 출력합니다. */
    // "sourceMap": true,                                /* 내보낸 자바스크립트 파일에 대한 소스 맵 파일을 만듭니다. */
    // "outFile": "./",                                  /* 모든 출력을 하나의 자바스크립트 파일로 묶는 파일을 지정합니다. 'declaration'이 true이면 모든 .d.ts 출력을 묶는 파일도 지정합니다. */
    // "outDir": "./",                                   /* 내보낸 모든 파일의 출력 폴더를 지정합니다. */
    // "removeComments": true,                           /* 주석 내보내기를 비활성화합니다. */
    // "noEmit": true,                                   /* 컴파일시 파일 내보내기를 비활성화합니다. */
    // "importHelpers": true,                            /* 파일별로 포함하는 대신 프로젝트당 한 번 tslib에서 helper 함수를 가져올 수 있습니다. */
    // "importsNotUsedAsValues": "remove",               /* 타입에만 사용되는 가져오기에 대한 내보내기/검사 동작을 지정합니다. */
    // "downlevelIteration": true,                       /* 반복을 위해 더 많은 규정을 준수하지만 상세하고 성능이 떨어지는 자바스크립트를 내보냅니다. */
    // "sourceRoot": "",                                 /* 참조 소스 코드를 찾기 위한 디버거의 루트 경로를 지정합니다. */
    // "mapRoot": "",                                    /* 디버거가 생성된 위치 대신 맵 파일을 찾아야 하는 위치를 지정합니다. */
    // "inlineSourceMap": true,                          /* 내보낸 자바스크립트 내에 소스 맵 파일을 포함합니다. */
    // "inlineSources": true,                            /* 내보낸 자바스크립트 내부의 소스 맵에 소스 코드를 포함합니다. */
    // "emitBOM": true,                                  /* 출력 파일의 시작 부분에 UTF-8 BOM(Byte Order Mark)을 내보냅니다. */
    // "newLine": "crlf",                                /* 내보내는 파일을 위한 새로운 행 문자를 설정합니다. */
    // "stripInternal": true,                            /* JSDoc 주석에 '@internal'이 있는 내보내기 선언을 비활성화합니다. */
    // "noEmitHelpers": true,                            /* 컴파일된 출력에서 '__extends'와 같은 사용자 지정 helper 함수 생성을 비활성화합니다. */
    // "noEmitOnError": true,                            /* 타입 검사 오류가 보고되면 파일 내보내기를 비활성화합니다. */
    // "preserveConstEnums": true,                       /* 생성된 코드에서 'const enum' 선언 지우기를 비활성화합니다. */
    // "declarationDir": "./",                           /* 생성된 선언 파일의 출력 디렉토리를 지정합니다. */
    // "preserveValueImports": true,                     /* 자바스크립트 출력에서 사용하지 않은 가져온 값을 유지합니다. */

    /* 상호 운용성 제약 옵션 */
    // "isolatedModules": true,                          /* 다른 가져오기에 의존하지 않고 각 파일을 안전하게 변환할 수 있는지 확인합니다. */
    // "allowSyntheticDefaultImports": true,             /* 모듈에 기본 내보내기가 없는 경우 'import x from y'를 허용합니다.  */
    "esModuleInterop": true /* CommonJS 모듈 가져오기 지원을 쉽게 하기 위해 추가적인 자바스크립트를 내보냅니다. 이렇게 하면 형식 호환성을 위해 'allowSyntheticDefaultImports'가 활성화됩니다. */,
    // "preserveSymlinks": true,                         /* 실제 경로에 대한 symlink 확인을 비활성화합니다. 이것은 노드의 동일한 플래그와 관련이 있습니다. */
    "forceConsistentCasingInFileNames": true /* 가져오기에서 대소문자가 올바른지 확인합니다. */,

    /* 타입 검사 관련 옵션 */
    "strict": true /* 모든 엄격한 타입 검사 옵션을 활성화합니다. */,
    // "noImplicitAny": true,                            /* 암시된 'any' 타입이 있는 식 및 선언에 대한 오류 보고를 활성화합니다. */
    // "strictNullChecks": true,                         /* 타입 검사 시 'null' 및 'undefined'를 확인합니다. */
    // "strictFunctionTypes": true,                      /* 함수를 할당할 때 매개변수와 반환 값이 하위 타입과 호환되는지 확인하십시오. */
    // "strictBindCallApply": true,                      /* 'bind', 'call' 및 'apply' 메서드의 인수가 원래 함수와 일치하는지 확인합니다. */
    // "strictPropertyInitialization": true,             /* 선언되었지만 생성자에서 설정되지 않은 클래스 속성을 확인합니다. */
    // "noImplicitThis": true,                           /* 'this'에 'any' 유형이 지정되면 오류 보고를 사용합니다. */
    // "useUnknownInCatchVariables": true,               /* catch 구문의 기본 변수는 'any' 대신 'unknown'을 사용합니다. */
    // "alwaysStrict": true,                             /* 'use strict'가 항상 사용합니다. */
    // "noUnusedLocals": true,                           /* 로컬 변수를 읽지 않을 때 오류 보고를 활성화합니다. */
    // "noUnusedParameters": true,                       /* 함수 매개변수를 읽지 않으면 오류를 발생시킵니다. */
    // "exactOptionalPropertyTypes": true,               /* 선택적 속성 타입을 'undefined'을 추가하는 대신 작성된 대로 해석합니다. */
    // "noImplicitReturns": true,                        /* 함수에서 명시적으로 반환하지 않는 코드 경로에 대한 오류 보고를 활성화합니다. */
    // "noFallthroughCasesInSwitch": true,               /* switch 문에서 fallthrough 사례에 대한 오류 보고를 활성화합니다. */
    // "noUncheckedIndexedAccess": true,                 /* 인덱스를 사용하여 액세스할 때 타입에 'undefined'을 추가합니다. */
    // "noImplicitOverride": true,                       /* 파생 클래스의 재정의 멤버가 재정의 한정자로 표시되었는지 확인합니다. */
    // "noPropertyAccessFromIndexSignature": true,       /* 인덱싱된 타입을 사용하여 선언된 키에 대해 인덱싱된 접근자를 사용하도록 합니다. */
    // "allowUnusedLabels": true,                        /* 사용하지 않는 레이블에 대한 오류 보고를 비활성화합니다. */
    // "allowUnreachableCode": true,                     /* 도달할 수 없는 코드에 대한 오류 보고를 비활성화합니다. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* 타입스크립트에 포함된 .d.ts 파일의 타입 검사를 건너뜁니다. */
    "skipLibCheck": true /* 모든 .d.ts 파일의 타입 검사를 건너뜁니다. */
  }
}
